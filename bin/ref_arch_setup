#!/usr/bin/env ruby
STDOUT.sync

require "rubygems" unless defined?(Gem)
require "ref_arch_setup"
require "optparse"

available_commands = [
  "install"
]

options = {}
# options["some_option"] = "some value"  #to set a default value

global = OptionParser.new do |opt|
  opt.banner = <<-BANNER
  Usage: ref_arch_setup [options] <subcommand> [options]

  Available Commands:

    install               - Install a bootstrapped mono PE on target_host

  Available Options:

BANNER
  opt.on("-h", "--help", "Prints this help") do
    puts opt
    exit
  end
  opt.on("--version", "Show currently running version of Ref_arch_setup") do
    puts RefArchSetup::Version::STRING
    exit 0
  end
end

subcommands = {
  "install" => OptionParser.new do |opt|
    opt.banner = "Usage: ref_arch_setup install [options]"
    opt.on("--target-host value", "Host to install PE on") do |value|
      options["target_host"] = value
    end
    opt.on("--pe-tarball-path value", "Path to PE tarball") do |value|
      options["pe_tarball_path"] = value
    end
    opt.on("--pe-conf-path value", "Path to pe.conf file") do |value|
      options["pe_conf_path"] = value
    end
  end
}

global.order!(ARGV)
command_string = ARGV[0]

if command_string.nil?
  puts global.help
  exit 0
end

unless available_commands.include?(command_string)
  puts "# ERROR, #{cmd} is not an available command"
  puts
  puts global.help
  exit 1
end

subcommands[command_string].parse!

cli = RefArchSetup::CLI.new(options)
cli.send(command_string)
